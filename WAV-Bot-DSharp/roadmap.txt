 - создать pipeline web-запросов, которые будут выполняться друг за другом с выдержанным интервалом. 
 - создать БД RavenDB, в которой будут храниться профили пользователей
 - добавить команду на запрос роли
 - добавить в профили пользователей настройки трекинга (какой сервер отслеживать, какие скоры, какие режимы)
 - добавить трекинг достижений с bancho/gatari и т.п.
 - добавить трекинг активности маппинга
 - добавить функцию в скелета который при каждом сообщении в котором есть вложение будет ставить реакцию :heart: или :wav_rankStatus_3:  (только в каналах #😆-memes и #🖼-art )
Чтобы можно было поставить лайк, как и в инстаграме

К примеру идеи следующие:
- попробовать через скелетрона сделать нормальную предложку карт. Т.е: будут команды "добавить карту на рассмотрение", 
"проголосовать за карту". Не будет отдельного для этого канала. А голосовать/добавлять карты можно только для своей категории
- упростить систему регистрации. Бот сам будет время от времени пересчитывать для всех категорию (в целом он уже потенциально
это умеет). Единственное, что нужно сделать для участия в конкурсе – задать свой osu! профиль через скелетрона и отметить, 
что ты будешь принимать участие в конкурсе (отдельную команду можно для этого сделать)
- прокачать систему скидывания скоров. За счет автоматической проверки и обработки скоров можно попробовать сделать 
лидерборд, обновляющийсяв реальном времени. Но тут придётся отменять правило "только один скор за все время". 
Но... с учетом того, что по большей части это правило было введено лишь из-за того, чтобы нам скорами не спамили и 
нам же было проще проверять их... мы можем от этого правила отказаться. Это, как по мне, сильно повысит общую... динамику 
конкурса =).


Базовые функции:

1 - Выполнение запланированных задач. Создание pipeline-а (пример: снятие бана/мута/предупреждения, обработка результатов конкурса)
	+ раз через какой-то зафиксированный промежуток времени
	+ в какой-то назначенный момент времени
2 - Распознавание реплеев. Десериализация файлов формата .osr
3 - Привязка Discord-профиля к osu! профилю (планируется требовать указание Discord учетки ХОТЯ БЫ на момент привязки)
4 - Регулярная проверка профилей группы пользователей на наличие новых скоров (трекинг скоров)
5 - Поощрение активности - отслежвание факта написания сообщений, нахождения в голосовых каналах (с учетом проведенного времени), сбор общей статистики
6 - Автоматизация W.w.W

Проверить возможность реализации:
- Автоматическое заполнение .psd шаблона (проверить на совместимость с raspberry pi)


1: ПЛАНИРОВЩИК ЗАДАЧ
https://www.cyberforum.ru/csharp-net/thread56551.html
Через DI передавать инстанс планировщика, в котором будет храниться информация о задачах, которые нужно выполнять. В конструкторах сервисов сразу же настраивать вызов методов через планировщик
Он же будет следить за исполнением задач
Каждый tick:
- поочередно проверяется каждая задача в списке
	если настало время выполнить задачу:
	- отправляем её в BackgroundQueue (чтобы каждая задача выполнялась чётко одна за другой во избежания проблем с потоками)

1.1: СИСТЕМА ПРЕДУПРЕЖДЕНИЙ, МУТА, БАНА НА ОПРЕДЕЛЕННОЕ ВРЕМЯ
Будет создан отдельная бд, в которой будет храниться информация о нарушениях. Столбцы:
id | discordId | timestampStart | timestampEnd | descrption | byWho

Отдельный сервис будет пинать БД и предоставлять публичные методы для её проверки.
В планировщике задач будет занесен, собственно, метод, который будет проверять наличие истекших наказаний

2. РАСПОЗНАВАНИЕ РЕПЛЕЕВ
Автоматически будт детектить файлы с расширением .osr. Будет пытаться скачать а затем десериализовать файл. В случае успеха вынимаем нужную инфу (зачастую просто шапка .osr файла)

3. ПРИВЯЗКА DISCORD ПРОФИЛЕЙ К OSU АККАМ
Через команду администратором или непосредственно самим человеком будет вызываться проверка наличия в учетке osu! записи о discord-профиле. Если DISCORD профиль в osu! совпадает с обрабатываемым, 
то discord-id и osu id заносятся в БД.

Добавить команды:
= osuset (-g -b ключи) [ссылка на профиль]

СТОЛБЦЫ В БД:
id | discord id | banchoId | gatariId 

4. ТРЕКИНГ СКОРОВ
Отдельный сервис будет обращаться к раннее упомянутой БД, чтобы получить список доступных для отслеживания игроков. Будут отслеживать топ-скоры и недавние скоры.
Дополнительно возможно ввести столбец | isTracking |

Добавить команды
= startTrack (user)
= stopTrack (user)

5. ПООЩРЕНИЕ АКТИВА
Дополнительно ввести новую таблицу для отслеживания типов активности. Столбцы:
id | discordId | activityId | timestamp

Добавить в основную БД столбец:
| points | allowedtrack |

Команды:
= forbidTrack (admin manual)
= allowTrack (admin manual)

Ежемесячно (мб чаще, мб позже) будут подводиться итоги активности, по которым будут проставляться флаги allowedTrack, который позволит отслеживать скоры.
Пользователь (или админ), у которого есть флаг allowedTrack, сможет включить трэкинг скоров.

6. Смена БД
Смена БД на RavenDB

7. Анализ реплеев
Нахождение среднего отклонения курсора от центров нот

8. Dashboard
Создание отдельного решения для реализации Dashboard-а (ASP.NET + React.js + Redux + RavenDB).
Реализация одноразовой ссылки и 2FA через личные сообщения
- визуальное отображение пункта 7
- редакторивание настроек трекинга (2FA обязательно)

9. Отображение количества представителей каждой категории











WMW 
1. Рулетка мап. Брать последние ранкнутые карты (либо участники сервера накидывают свои) и что-то среди них выбирать. 
2. Тематические маппулы (ру. каверы, хеллоуинские, новогодние). Создать на сервере группу, которая будет заниматься подбором тематических маппулов и оценкой играбельности карт. (можно взвалить на маперов)
3. Разрешить моды (HD, HR)
4. Вернуть V2
5. Показывать реплей участника с его скином.
6. Смотреть реплеи первых трёх мест в пределах категории