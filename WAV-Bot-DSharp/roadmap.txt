Базовые функции:

1 - Выполнение запланированных задач. Создание pipeline-а (пример: снятие бана/мута/предупреждения, обработка результатов конкурса)
	+ раз через какой-то зафиксированный промежуток времени
	+ в какой-то назначенный момент времени
2 - Распознавание реплеев. Десериализация файлов формата .osr
3 - Привязка Discord-профиля к osu! профилю (планируется требовать указание Discord учетки ХОТЯ БЫ на момент привязки)
4 - Регулярная проверка профилей группы пользователей на наличие новых скоров (трекинг скоров)
5 - Поощрение активности - отслежвание факта написания сообщений, нахождения в голосовых каналах (с учетом проведенного времени), сбор общей статистики
6 - Автоматизация W.w.W

Проверить возможность реализации:
- Автоматическое заполнение .psd шаблона (проверить на совместимость с raspberry pi)


1: ПЛАНИРОВЩИК ЗАДАЧ
https://www.cyberforum.ru/csharp-net/thread56551.html
Через DI передавать инстанс планировщика, в котором будет храниться информация о задачах, которые нужно выполнять. В конструкторах сервисов сразу же настраивать вызов методов через планировщик
Он же будет следить за исполнением задач
Каждый tick:
- поочередно проверяется каждая задача в списке
	если настало время выполнить задачу:
	- отправляем её в BackgroundQueue (чтобы каждая задача выполнялась чётко одна за другой во избежания проблем с потоками)

1.1: СИСТЕМА ПРЕДУПРЕЖДЕНИЙ, МУТА, БАНА НА ОПРЕДЕЛЕННОЕ ВРЕМЯ
Будет создан отдельная бд, в которой будет храниться информация о нарушениях. Столбцы:
id | discordId | timestampStart | timestampEnd | descrption | byWho

Отдельный сервис будет пинать БД и предоставлять публичные методы для её проверки.
В планировщике задач будет занесен, собственно, метод, который будет проверять наличие истекших наказаний

2. РАСПОЗНАВАНИЕ РЕПЛЕЕВ
Автоматически будт детектить файлы с расширением .osr. Будет пытаться скачать а затем десериализовать файл. В случае успеха вынимаем нужную инфу (зачастую просто шапка .osr файла)

3. ПРИВЯЗКА DISCORD ПРОФИЛЕЙ К OSU АККАМ
Через команду администратором или непосредственно самим человеком будет вызываться проверка наличия в учетке osu! записи о discord-профиле. Если DISCORD профиль в osu! совпадает с обрабатываемым, 
то discord-id и osu id заносятся в БД.

Добавить команды:
= osuset (-g -b ключи) [ссылка на профиль]

СТОЛБЦЫ В БД:
id | discord id | banchoId | gatariId 

4. ТРЕКИНГ СКОРОВ
Отдельный сервис будет обращаться к раннее упомянутой БД, чтобы получить список доступных для отслеживания игроков. Будут отслеживать топ-скоры и недавние скоры.
Дополнительно возможно ввести столбец | isTracking |

Добавить команды
= startTrack (user)
= stopTrack (user)

5. ПООЩРЕНИЕ АКТИВА
Дополнительно ввести новую таблицу для отслеживания типов активности. Столбцы:
id | discordId | activityId | timestamp

Добавить в основную БД столбец:
| points | allowedtrack |

Команды:
= forbidTrack (admin manual)
= allowTrack (admin manual)

Ежемесячно (мб чаще, мб позже) будут подводиться итоги активности, по которым будут проставляться флаги allowedTrack, который позволит отслеживать скоры.
Пользователь (или админ), у которого есть флаг allowedTrack, сможет включить трэкинг скоров.